AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Instance with Java 8 and Tomcat 9'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  ArtifactBucketName:
    Description: S3 bucket to WAR file (e.g., my-bucket)
    Type: String
  SSHLocation:
    Description: IP range allowed for SSH access
    Type: String
    Default: 0.0.0.0/0

Resources:
  # Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # IAM Role for EC2 to access S3
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'

  # EC2 Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system
          yum update -y

          # Install Java 8
          amazon-linux-extras install java-openjdk8 -y

          # Install Tomcat 9
          yum install -y tomcat tomcat-webapps tomcat-admin-webapps

          # Configure Tomcat
          sed -i 's/<!-- <user name="admin" password="admin" roles="manager-gui,admin-gui"/> -->/<user name="admin" password="admin" roles="manager-gui,admin-gui"/>/' /etc/tomcat/tomcat-users.xml

          # Enable remote access to manager app
          sed -i 's/Context privileged="true"/Context privileged="true" \n    allowLinking="true"/' /usr/share/tomcat/webapps/manager/META-INF/context.xml

          # Download WAR file from S3
          aws s3 cp s3://${ArtifactBucketName}/ROOT.war /usr/share/tomcat/webapps/ROOT.war

          # Set permissions
          chown tomcat:tomcat /usr/share/tomcat/webapps/ROOT.war

          # Start Tomcat
          systemctl enable tomcat
          systemctl start tomcat

          # Install and configure Nginx as reverse proxy (optional)
          yum install -y nginx
          cat > /etc/nginx/conf.d/tomcat.conf <<EOL
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
          }
          EOL
          systemctl enable nginx
          systemctl start nginx

Outputs:
  ApplicationURL:
    Description: URL of the deployed application
    Value: !Sub "http://${WebServer.PublicDnsName}"
  TomcatManagerURL:
    Description: URL of Tomcat Manager
    Value: !Sub "http://${WebServer.PublicDnsName}:8080/manager/html"
  SSHCommand:
    Description: Command to SSH into the instance
    Value: !Sub "ssh -i ${KeyName}.pem ec2-user@${WebServer.PublicDnsName}"